"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  UnifiedOverlayProvider: () => UnifiedOverlayProvider,
  createOverlay: () => createOverlay,
  default: () => src_default,
  install: () => install,
  renderOverlay: () => renderOverlay,
  useInjectHolder: () => useInjectHolder,
  useOverlayMeta: () => useOverlayMeta
});
module.exports = __toCommonJS(src_exports);

// src/internal/index.ts
var context = {
  appContext: null
};
var OverlayMetaKey = Symbol("__imperative_overlay_key");

// src/hooks/meta.ts
var import_vue_demi = require("vue-demi");
var import_core = require("@vueuse/core");

// src/utils/global.ts
var UnifiedOverlayProviderID = "unified-overlay";
function createGlobalNode(id = "", root = document.body) {
  const el = document.createElement("div");
  if (id)
    el.id = id;
  root.appendChild(el);
  return el;
}

// src/utils/tools.ts
function noop() {
}
function allowed() {
  throw new Error("overlay - Error: It is not allowed to call confirm and cancel externally immediately, please wait for the component to render");
}
function delay(milliseconds) {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
}
function varName(id = UnifiedOverlayProviderID, auto = true) {
  if (auto)
    return `${id}--${varName.index++}`;
  return id;
}
varName.index = 1;

// src/utils/promise.ts
function createPromiser() {
  let resolve;
  let reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  return { promise, reject, resolve };
}
function createImperativePromiser() {
  const promiser = createPromiser();
  promiser.promise.confirm = allowed;
  promiser.promise.cancel = allowed;
  return promiser;
}

// src/hooks/meta.ts
function useOverlayMeta(options = {}) {
  const { animation = 0, immediate = true, model = "visible", automatic = true } = options;
  const meta = (0, import_vue_demi.inject)(OverlayMetaKey, useTemplateMeta(model, options));
  if (!meta.isTemplate && automatic) {
    (0, import_vue_demi.watch)(meta.visible, async () => {
      var _a;
      if (meta.visible.value)
        return void 0;
      if (animation > 0)
        await delay(animation);
      (_a = meta.vanish) == null ? void 0 : _a.call(meta);
    });
  }
  if (immediate)
    (0, import_vue_demi.onMounted)(() => meta.visible.value = true);
  (0, import_vue_demi.provide)(OverlayMetaKey, null);
  return meta;
}
function useTemplateMeta(model, options = {}) {
  const instance = (0, import_vue_demi.getCurrentInstance)();
  const events = options.event || {};
  const visible = instance ? (0, import_core.useVModel)(instance.props, model) : (0, import_vue_demi.ref)(false);
  const cancel = (value) => {
    visible.value = false;
    instance == null ? void 0 : instance.emit(events.cancel || "cancel", value);
  };
  const confirm = (value) => {
    visible.value = false;
    instance == null ? void 0 : instance.emit(events.confirm || "confirm", value);
  };
  return {
    cancel,
    confirm,
    vanish: noop,
    visible,
    isTemplate: true
  };
}

// src/hooks/visible.ts
function useVisibleScripts(visible, options) {
  function cancel(value) {
    var _a, _b;
    (_a = options.promiser) == null ? void 0 : _a.reject(value);
    (_b = options.events) == null ? void 0 : _b.emit("cancel" /* Cancel */, value);
    visible.value = false;
  }
  function confirm(value) {
    var _a, _b;
    (_a = options.promiser) == null ? void 0 : _a.resolve(value);
    (_b = options.events) == null ? void 0 : _b.emit("confirm" /* Confirm */, value);
    visible.value = false;
  }
  function vanish() {
    var _a, _b;
    (_a = options.vanish) == null ? void 0 : _a.call(options);
    (_b = options.promiser) == null ? void 0 : _b.reject();
  }
  if (options.promiser) {
    options.promiser.promise.confirm = confirm;
    options.promiser.promise.cancel = cancel;
  }
  return { visible, confirm, cancel, vanish };
}

// src/hooks/holder.ts
var import_vue_demi4 = require("vue-demi");
var import_mitt = __toESM(require("mitt"));

// src/helper/render.ts
var import_vue_demi3 = require("vue-demi");
var import_pascal_case = require("pascal-case");

// src/helper/define.ts
var import_vue_demi2 = require("vue-demi");
function defineProviderComponent(component, options) {
  function defaultRender() {
    return (0, import_vue_demi2.h)(component, options.props);
  }
  const Provider = (0, import_vue_demi2.defineComponent)({
    name: options.name,
    setup: options.setup,
    render: options.render === false ? void 0 : options.render || defaultRender
  });
  return Provider;
}

// src/helper/render.ts
function renderChildApp(component, props, options = {}) {
  var _a, _b;
  const name = varName(options.id, options.autoIncrement);
  function vanish() {
    app.unmount();
    container.remove();
  }
  const Provider = (0, import_vue_demi3.defineComponent)({
    name: (0, import_pascal_case.pascalCase)(name),
    setup() {
      var _a2;
      (_a2 = options.setup) == null ? void 0 : _a2.call(options);
    },
    render() {
      return (0, import_vue_demi3.h)(component, props);
    }
  });
  const app = (0, import_vue_demi3.createApp)(Provider);
  const parent = ((_a = options.appContext) == null ? void 0 : _a.app) || ((_b = context.appContext) == null ? void 0 : _b.app);
  if (parent) {
    app.config.globalProperties = parent.config.globalProperties;
    const { reload, ...appContext } = parent._context;
    Object.assign(app._context, appContext);
  }
  const container = createGlobalNode(name, options.root || document.body);
  app.mount(container);
  return { vanish };
}

// src/hooks/holder.ts
function useInjectHolder(component, options = {}) {
  const { callback, scripts, props, refresh } = useRefreshMetadata();
  const name = varName(options.id, options.autoIncrement);
  function render2() {
    return (0, import_vue_demi4.h)(import_vue_demi4.Teleport, { to: options.root || document.body, disabled: !!(options.root === false) }, [
      (0, import_vue_demi4.h)("div", { id: name }, [(0, import_vue_demi4.h)(component, props.value)])
    ]);
  }
  const holder = defineProviderComponent(component, {
    render: false,
    setup() {
      (0, import_vue_demi4.provide)(OverlayMetaKey, scripts);
      return () => refresh.value ? render2() : null;
    }
  });
  return [callback, holder];
}
function useRefreshMetadata() {
  const visible = (0, import_vue_demi4.ref)(false);
  const refresh = (0, import_vue_demi4.ref)(false);
  const events = (0, import_mitt.default)();
  const props = (0, import_vue_demi4.ref)();
  const options = (0, import_vue_demi4.reactive)({
    events,
    vanish
  });
  const scripts = useVisibleScripts(visible, options);
  function vanish() {
    refresh.value = false;
    props.value = {};
    events.off("*");
  }
  async function callback(_props) {
    props.value = _props;
    refresh.value = true;
    await (0, import_vue_demi4.nextTick)();
    visible.value = true;
    const promiser = createImperativePromiser();
    Object.assign(options, { promiser });
    return promiser.promise;
  }
  return { callback, scripts, props, refresh };
}

// src/transform/index.ts
var import_vue_demi5 = require("vue-demi");
function createOverlay(component) {
  function executor(props, promiser, options) {
    const caches = { vanish: noop };
    function setup() {
      const visible = (0, import_vue_demi5.ref)(false);
      const scripts = useVisibleScripts(visible, Object.assign(caches, { promiser }));
      (0, import_vue_demi5.provide)(OverlayMetaKey, scripts);
    }
    caches.vanish = renderChildApp(component, props, { ...options, setup }).vanish;
  }
  function caller(props, options) {
    const promiser = createImperativePromiser();
    executor(props, promiser, options);
    return promiser.promise;
  }
  return caller;
}
function renderOverlay(component, options = {}) {
  return createOverlay(component)(options.props, options);
}

// src/components/index.ts
var import_vue_demi6 = require("vue-demi");
var UnifiedOverlayProvider = (0, import_vue_demi6.defineComponent)({
  setup(_, { slots }) {
    const { appContext } = (0, import_vue_demi6.getCurrentInstance)();
    context.appContext = appContext;
    return () => {
      var _a;
      return (_a = slots.default) == null ? void 0 : _a.call(slots);
    };
  }
});

// src/index.ts
var install = (app) => {
  context.appContext = app._context;
};
var unoverlay = { install };
var src_default = unoverlay;
//# sourceMappingURL=index.cjs.js.map
