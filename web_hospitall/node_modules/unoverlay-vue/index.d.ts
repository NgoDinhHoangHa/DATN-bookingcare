import * as vue_demi from 'vue-demi';
import { AppContext, ExtractPropTypes, Component, Ref, App } from 'vue-demi';

interface MountOptions {
    /**
     * mount container element id
     *
     * @default 'unified-overlay-provider'
     */
    id?: string;
    /**
     * enable mount container element id auto increment
     *
     * @default true
     */
    autoIncrement?: boolean;
    /**
     * the dom node to mount at render time
     *
     * @default document.body
     */
    root?: HTMLElement | false;
    /** current app context */
    appContext?: AppContext;
}

declare type ImperativePromiser<T = void> = Promiser<{
    confirm: Function;
    cancel: Function;
}, T>;
declare type ImperativePromise<T = void> = ImperativePromiser<T>['promise'];
interface Promiser<P = object, T = void> {
    promise: Promise<T> & P;
    resolve: Function;
    reject: Function;
}

interface ImperativeOverlay<Props, Resolved> {
    (props?: ExtractPropTypes<Props>, options?: MountOptions): ImperativePromise<Resolved>;
}
interface RenderOptions<Props> extends MountOptions {
    props?: ExtractPropTypes<Props>;
}
/**
 * Create imperative overlay
 * @param component Component
 */
declare function createOverlay<Props, Resolved = void>(component: Component): ImperativeOverlay<Props, Resolved>;
/**
 * Execute overlay component
 * @param component Component
 * @param options mount options and props
 */
declare function renderOverlay<Props = {}, Resolved = void>(component: Component, options?: RenderOptions<Props>): Promise<Resolved> & {
    confirm: Function;
    cancel: Function;
};

interface OverlayOptions {
    /** animation duration to avoid premature destruction of components */
    animation?: number;
    /** whether to set visible to true immediately */
    immediate?: boolean;
    /**
     * v-model fields used by template
     *
     * @default 'visible'
     */
    model?: string;
    /**
     * template use event name
     */
    event?: {
        /**
       * cancel event name used by the template
       *
       * @default 'cancel'
       */
        cancel?: string;
        /**
       * confirm event name used by the template
       *
       * @default 'confirm'
       */
        confirm?: string;
    };
    /**
     * whether to automatically handle components based on visible and animation
     *
     * @default true
     */
    automatic?: boolean;
}
interface OverlayMeta {
    /** the notification cancel, modify visible, and destroy it after the animation ends */
    cancel: Function;
    /** the notification confirm, modify visible, and destroy it after the animation ends */
    confirm: Function;
    /** destroy the current instance (immediately) */
    vanish: Function;
    /** visible control popup display and hide */
    visible: Ref<boolean>;
    /** use in template */
    isTemplate?: boolean;
}
/**
 * get overlay layer meta information
 * @function cancel  the notification cancel, modify visible, and destroy it after the animation ends
 * @function confirm the notification confirm, modify visible, and destroy it after the animation ends
 * @function vanish destroy the current instance (immediately)
 * @field visible control popup display and hide
 * @returns
 */
declare function useOverlayMeta(options?: OverlayOptions): OverlayMeta;

declare type InjectionHolder<Props, Resolved> = [ImperativeOverlay<Props, Resolved>, Component];
declare function useInjectHolder<Props, Resolved = void>(component: Component, options?: Omit<MountOptions, 'appContext'>): InjectionHolder<Props, Resolved>;

declare const UnifiedOverlayProvider: Component<any, any, any, vue_demi.ComputedOptions, vue_demi.MethodOptions>;

declare const install: (app: App) => void;
declare const unoverlay: {
    install: (app: App) => void;
};

export { ImperativeOverlay, InjectionHolder, OverlayMeta, OverlayOptions, RenderOptions, UnifiedOverlayProvider, createOverlay, unoverlay as default, install, renderOverlay, useInjectHolder, useOverlayMeta };
